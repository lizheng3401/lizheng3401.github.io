<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Maven 安装]]></title>
    <url>%2F2018%2F05%2F11%2FMaven-%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文记录了Window10上安装Maven 下载MavenMaven下载地址进入该页面下载Maven，完成后解压 配置环境变量打开系统属性面板（右击“计算机”&gt;”属性”），单击高级系统设置，再单击环境变量，在系统变量中新建一个变量，变量名为M2_HOME，变量值为Maven的安装目录，如图： 然后添加Maven bin 文件夹到 PATH 的最后，如： %M2_HOME%\bin; 如图: 验证安装打开CMD，输入mvn -version,出现如下内容表明安装成功 Maven本地仓库和远程仓库配置Maven的本地仓库是用来保存所有的项目依赖的文件的，默认情况下，Maven的本地仓库默认为系统用户的 .m2 目录文件夹。故而如果使用默认本地仓库地址，随着各类的项目依赖不断增加，会导致占用许多C盘空间，所以一般会修改默认的本地仓库的保存位置。 首先，在Maven的文件夹下的conf文件夹中存在一个settings.xml打开该文件，找到如图所示的所在行，如图所示：按照划线部分的示例，添加自定义的本地仓库的位置 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker Redis的官方镜像简单使用]]></title>
    <url>%2F2018%2F04%2F26%2FRedis%E7%9A%84%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Redis是一种键值对形式的分布式缓存数据库 拉取镜像在docker-compose.yml文件中添加如下配置: 1234redis: image: redis ports: - "6379:6379" 启动docker-compose 1dokcer-compose up dokcer-compose会自动从云端拉取redis的镜像,由于大天朝的部分原因(QAQ),下载通常会失败,更换Docker中国官方镜像源:修改/etc/docker/daemon.json文件,没有就新建一个 1vi /etc/docker/daemon.json 添加如下: 123&#123; "registry-mirrors": ["https://registry.docker-cn.com"]&#125; 你会发现速度超快,我在公司实测都是MB/S级别的 进入Docker容器的redis的客户端下载完成后查看dockerdocker ps -a,发现已正常启动,查看其容器实例的ID 然后进入Docker容器redis的客户端 1docker exec -it 容器ID redis-cli 然后终端会呈现如下交互式环境,证明成功进入 1127.0.0.1:6379&gt; 然后依据官方的Interactive tutorial就可以开始愉快的玩耍了~(≧▽≦)/~这里就不在重述 redis配置临时密码首先查看redis有没有配置临时密码，无密码会返回这个 123127.0.0.1:6379&gt; config get requirepass1) "requirepass"2) "" 然后设置密码， 1234 1127.0.0.1:6379&gt; config set requirepass 1234 再次查看当前redis就提示需要密码： 12127.0.0.1:6379&gt; config get requirepass(error) NOAUTH Authentication required. python的redis数据库连接——插件库(redis)数据库连接，默认执行前后数据库连接然后释放连接123r = redis.Redis(host='0.0.0.0', port=6379, db=0, password="1234")r.set('name', 'test')print(r.get('name')) 数据库连接池配置1234pool = redis.ConnectionPool(host="0.0.0.0", port=6379, db=0, password="1234")r = redis.Redis(connection_pool=pool)r.set("age", "16")r.get("age") 数据库的事务性操作redis默认在执行每次请求都会创建（连接池申请链接）和断开（归还连接池）一次连接操作，如果想要再一次请求中指定多个命令，则可以使用pipline实现一次请求指定多个命令，并且默认情况下一次pipline是原子性操作。 123456pool = redis.ConnectionPool(host='0.0.0.0', port=6379)r = redis.Redis(connection_pool=pool)pipe = r.pipeline(transaction=True)r.set('name', 'python')r.set('age', '18')pipe.execute() 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>后端开发</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTMLCSS备忘录]]></title>
    <url>%2F2018%2F04%2F18%2FHTMLCSS%E5%A4%87%E5%BF%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[此处作为日常的HTML CSS的遗忘的元素和属性备忘录 12345678&lt;b&gt;加粗文本&lt;/b&gt; &lt;strong&gt;&lt;/strong&gt;&lt;i&gt;斜体文本&lt;/&gt; &lt;em&gt;&lt;/em&gt;&lt;sub&gt;下标&lt;/sub&gt;&lt;sup&gt;上标&lt;/sup&gt;&lt;blockquote&gt;长句子引用&lt;/blockquote&gt;&lt;q&gt;短句引用&lt;/q&gt;&lt;address&gt;定义地址&lt;/address&gt;&lt;addr&gt;定义缩写&lt;/addr&gt;]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6入门-字符串的拓展]]></title>
    <url>%2F2018%2F04%2F18%2FES6%E5%85%A5%E9%97%A8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%93%E5%B1%95%2F</url>
    <content type="text"><![CDATA[JavaScript中字符串使用unicode表示法,一般由2个字节构成一个字符,超过该范围的字节会以8个字节形式给出 codePointAt()1234567891011121314var s = "𠮷";s.length // 2s.charAt(0) // ''s.charAt(1) // ''s.charCodeAt(0) // 55362s.charCodeAt(1) // 57271let s = '𠮷a';s.codePointAt(0) // 134071s.codePointAt(1) // 57271s.codePointAt(2) // 97 String.fromCodePoint()12345//从码点返回对应的字符String.fromCodePoint(0x20BB7)// "𠮷"String.fromCodePoint(0x78, 0x1f680, 0x79) === 'x\uD83D\uDE80y'// true 若传入多个参数,则该函数将会合并所有参数,形成一个字符串返回 字符串的遍历接口使用for....of可以循环遍历,并且他可以识别大于0xffff的码点, 12345678910for(let it of "ABC")&#123; console.log(it);&#125;// "A"// "B"// "C"let str = "𠮷"for(let i of str)&#123; console.log(i)&#125; at()返回字符串指定位置的字符,但无法识别大于0xffff的字符 12"abc".charAt(0) // "a""𠮷".charAt(0) // "\uD842" normalize()Unicode正规化:用来将字符的不同表示方法统一为同样的形式 includes(),startsWith(),endsWith()includes(): 返回布尔值,表示是否找到了参数字符串startsWith(): 返回布尔值,表示参数字符串是否在源字符串的头部.endsWith():返回布尔值,表示参数字符串是否在源字符串的尾部. 12345let s = 'Hello world!';s.startsWith('Hello') // trues.endsWith('!') // trues.includes('o') // true 可利用第二个参数指定开始搜索的范围12345let s = 'Hello world!';s.startsWith('world', 6) // true 从第六个字符开始到结尾组成的字符串是否以`world`结尾s.endsWith('Hello', 5) // true 前五个字符组成的字符串是否以`Hello`结尾的s.includes('Hello', 6) // false 从第六个字符开始到结尾组成的字符串是否包含`Hello` repeat()返回一个新的字符串,将对应字符串重复n次1"x".repeat(3) // "xxx" 首先会对参数进行四舍五入,完成了若得到了除0或者正整数之外的值,则会报错或返回空字符串 padStart(),padEnd()用户字符串的补全,分别为首部补全,尾部补全,常见于数字的格式化时候的补全例如:十位数的字符串123'1'.padStart(10, '0') // "0000000001"'12'.padStart(10, '0') // "0000000012"'123456'.padStart(10, '0') // "0000123456" 参数1为显示指定返回的字符串的长度,参数2默认为空格,即空格补全,若补全长度之和大于指定的长度,则截取补全的字符以满足指定长度.1'x'.padEnd(4, 'ab') // 'xaba' matchAll()返回一个字符串对该正则表达式的所有匹配 模板字符串利用反引号标识,可嵌入变量,可定义多行字符串123456789101112let a = "1234"let str = `Hello$&#123;a&#125;`console.log(str) // "Hello1234"// 多行字符串$('#list').html(`&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;`); 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6入门---变量的解构赋值]]></title>
    <url>%2F2018%2F04%2F17%2FES6%E5%85%A5%E9%97%A8-%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构 数组的解构赋值1let [a, b, c] = [1, 2, 3] 可以按照对应的位置,对变量进行赋值此种写法相当于模式匹配,例子如下:1234567891011121314151617181920212223// 数组嵌套赋值let [foo, [[bar], baz]] = [1, [[2], 3]];foo // 1bar // 2baz // 3// 部分匹配let [ , , third] = ["foo", "bar", "baz"];third // "baz"let [x, , y] = [1, 2, 3];x // 1y // 3// 部分匹配let [head, ...tail] = [1, 2, 3, 4];head // 1tail // [2, 3, 4]let [x, y, ...z] = ['a'];x // "a"y // undefinedz // [] 解构赋值失败,则变量的值为undefined12let [foo] = []let [bar, foo] = [1] 不完全匹配12345678let [x, y] = [1, 2, 3];x // 1y // 2let [a, [b], d] = [1, [2, 3], 4];a // 1b // 2d // 4 注:解构赋值的等号右边必须是可迭代的,非迭代对象将会报错 1234567// 报错let [foo] = 1;let [foo] = false;let [foo] = NaN;let [foo] = undefined;let [foo] = null;let [foo] = &#123;&#125;; 解构赋值允许设定默认值12345let [foo = true] = [];foo // truelet [x, y = 'b'] = ['a']; // x='a', y='b'let [x, y = 'b'] = ['a', undefined]; // x='a', y='b' 默认对象生效的条件是该对象对应的值必须严格等于undefined,否则不会生效 12345let [x = 1] = [undefined];x // 1let [x = 1] = [null];x // null 对象的解构赋值123let &#123; foo, bar &#125; = &#123; foo: "aaa", bar: "bbb" &#125;;foo // "aaa"bar // "bbb" 变量的名称必须与对应的属性值同名才可以取到正确的值 实质上如下:先找到对象的同名属性,然后赋值给对应的变量1234567let &#123; foo: baz &#125; = &#123; foo: 'aaa', bar: 'bbb' &#125;;baz // "aaa"let obj = &#123; first: 'hello', last: 'world' &#125;;let &#123; first: f, last: l &#125; = obj;f // 'hello'l // 'world' note: 对象解构赋值也可以嵌套, 也可以指定默认值,生效条件相同,即属性值严格等于undefined 如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。 12// 报错let &#123;foo: &#123;bar&#125;&#125; = &#123;baz: 'baz'&#125;; 此时foo的值已经为undefined,然后又取它的子属性的值自然会报错 避免大括号在首位,如下报错是因为JavaScript引擎将其认为是代码块 12345678// 错误的写法let x;&#123;x&#125; = &#123;x: 1&#125;;// SyntaxError: syntax error// 正确的写法let x;(&#123;x&#125; = &#123;x: 1&#125;); 字符串的解构赋值与数组类似 数值和布尔值的解构赋值首先会将等号右边的数值或者布尔值转换为对象,然后进行解构赋值 12345let &#123;toString: s&#125; = 123;s === Number.prototype.toString // truelet &#123;toString: s&#125; = true;s === Boolean.prototype.toString // true 但undefined和null不能转换为对象,所以对他们解构赋值会报错 函数参数的解构赋值12345function add([x, y])&#123; return x + y;&#125;add([1, 2]); // 3 以下代码是为函数move的参数指定默认值，而不是为变量x和y指定默认值 12345678function move(&#123;x, y&#125; = &#123; x: 0, y: 0 &#125;) &#123; return [x, y];&#125;move(&#123;x: 3, y: 8&#125;); // [3, 8]move(&#123;x: 3&#125;); // [3, undefined]move(&#123;&#125;); // [undefined, undefined]move(); // [0, 0] 圆括号问题不能使用圆括号的情况 变量声明语句 123456789// 全部报错let [(a)] = [1];let &#123;x: (c)&#125; = &#123;&#125;;let (&#123;x: c&#125;) = &#123;&#125;;let &#123;(x: c)&#125; = &#123;&#125;;let &#123;(x): c&#125; = &#123;&#125;;let &#123; o: (&#123; p: p &#125;) &#125; = &#123; o: &#123; p: 2 &#125; &#125;; 函数参数 1234// 报错function f([(z)]) &#123; return z; &#125;// 报错function f([z,(x)]) &#123; return x; &#125; 赋值语句的模式 123// 全部报错(&#123; p: a &#125;) = &#123; p: 42 &#125;;([a]) = [5]; 可以使用圆括号的情况赋值语句的非模式部分 123[(b)] = [3]; // 正确(&#123; p: (d) &#125; = &#123;&#125;); // 正确[(parseInt.prop)] = [3]; // 正确 用途 交换变量的值 1234let x = 1;let y = 2;[x, y] = [y, x]; 从函数返回多个值 12345678910111213141516// 返回一个数组function example() &#123; return [1, 2, 3];&#125;let [a, b, c] = example();// 返回一个对象function example() &#123; return &#123; foo: 1, bar: 2 &#125;;&#125;let &#123; foo, bar &#125; = example(); 函数参数的定义 1234567// 参数是一组有次序的值function f([x, y, z]) &#123; ... &#125;f([1, 2, 3]);// 参数是一组无次序的值function f(&#123;x, y, z&#125;) &#123; ... &#125;f(&#123;z: 3, y: 2, x: 1&#125;); 提取JSON数据 12345678910let jsonData = &#123; id: 42, status: "OK", data: [867, 5309]&#125;;let &#123; id, status, data: number &#125; = jsonData;console.log(id, status, number);// 42, "OK", [867, 5309] 函数参数的默认值 便利Map结构 1234567891011121314151617const map = new Map();map.set('first', 'hello');map.set('second', 'world');for (let [key, value] of map) &#123; console.log(key + " is " + value);&#125;// first is hello// second is world// 获取键名for (let [key] of map) &#123; // ...&#125;// 获取键值for (let [,value] of map) &#123; // ...&#125; 输入模块的制定方法 1const &#123; SourceMapConsumer, SourceNode &#125; = require("source-map"); 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6入门---let和const]]></title>
    <url>%2F2018%2F04%2F16%2FES6%E5%85%A5%E9%97%A8-let%E5%92%8Ccosnt%2F</url>
    <content type="text"><![CDATA[let和const均为ES6中声明变量的方法,用法类似于var,但是其所声明的变量,只在let命令所在的代码块内有效 没有变量提升其所声明的变量,必须先声明再使用,若先使用,后声明则会报错 暂时性死区即在存在let的块级作用域,形成了一个封闭的环境,在这其中,若先使用后声明则仍旧会报错 如下: 1234&#123; console.log(temp);//暂时性死区,会报错 let temp //死区结束&#125; 有些隐蔽的死区如下:1234function foo(x=y,y=2)&#123; return [x,y]&#125;foo() //报错 该报错是因为在y还没有声明的时候就使用了(将y赋值给x),此时就会报错 不能重复声明在同一个作用域中,不能重复声明同一个变量12345678function a()&#123; let a = 5; var a = 5;&#125;function b()&#123; let a = 5; let a = 5;&#125; 这两者都会报错 块级作用域let和const实际上提供了一种块级作用域ES6允许块级作用域随意嵌套外层作用域无法读取内层作用域的变量,内层作用域的变量可覆盖外层作用域的变量 在块级作用域中声明函数12345678910function f() &#123; console.log('I am outside!'); &#125;(function () &#123; if (false) &#123; // 重复声明一次函数f function f() &#123; console.log('I am inside!'); &#125; &#125; f();&#125;()); ES6中,理论上该函数运行会得到I am outside,因为外层的作用域无法访问内层变量,但内层作用域的变量可访问外层变量.在由于兼容性问题,在浏览器中,块级作用域声明的函数,行为类似于var声明的变量 note:考虑到兼容性问题,应该避免在块级作用域中声明函数,或者声明时利用函数表达式的形式声明:1234567891011121314// 函数声明语句&#123; let a = 'secret'; function f() &#123; return a; &#125;&#125;// 函数表达式&#123; let a = 'secret'; let f = function () &#123; return a; &#125;;&#125; note: ES6 的块级作用域允许声明函数的规则，只在使用大括号的情况下成立，如果没有使用大括号，就会报错 constconst声明的变量即常量,即声明后无法改变该变量的值,所以const声明变量时候必须进行初始化,若不声明,则会报错const与let类似:只在声明所在的块级作用域内有效,不存在变量提升,同样存在暂时性死区,只能在声明的位置后边使用 const的声明变量的值不变是针对于变量指向的内存地址不变,对于值类型的变量类型来说,则值不能变,但对于引用类型的变量类型来说,则该变量所指向的内存地址不变,即指向对象的指针不变,但对象的内容是可以变的,12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: "foo" is read-only 12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: "foo" is read-only ES6声明变量的六种方法var function let const import class 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue解决echart在element的tab切换时显示不正确]]></title>
    <url>%2F2018%2F03%2F30%2FVue%E8%A7%A3%E5%86%B3echart%E5%9C%A8element%E7%9A%84tab%E5%88%87%E6%8D%A2%E6%97%B6%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E7%A1%AE%2F</url>
    <content type="text"><![CDATA[最近在项目中遇到了这种情况，需要在tab控件上渲染多个echart图标，然后切换查看时，发现图表的宽度不正确 原因：在页面进行加载时，隐藏的图表找不到对应的div大小，所以默认给了一个大小。所以要做的就是在页面加载时，就对图表进行初始化。网上的解决方案大多都是监听tab的切换事件，然后再根据切换的页面重新渲染echart组件，比较麻烦。如下是个人的解决方法： 原理：利用v-if属性,当切换至对应的tab时，设置其v-if的值为true即可，同时设置默认显示的tab举例如下： 1234567891011121314&lt;el-tabs type="card" v-model="tabItem"&gt; &lt;el-tab-pane name="heart"&gt; &lt;span slot="label"&gt;&lt;icon name="heart" scale="2"&gt;&lt;/icon&gt;心率&lt;/span&gt; &lt;baseline ref="heart" :chartData="&#123;&#125;" v-if="'heart' === tabItem"&gt;&lt;/baseline&gt; &lt;/el-tab-pane&gt; &lt;el-tab-pane name="breath"&gt; &lt;span slot="label"&gt;&lt;icon name="breath" scale="2"&gt;&lt;/icon&gt;呼吸&lt;/span&gt; &lt;baseline ref="breath" :chartData="&#123;&#125;" v-if="'breath' === tabItem"&gt;&lt;/baseline&gt; &lt;/el-tab-pane&gt; &lt;el-tab-pane label="体动" name="move"&gt; &lt;span slot="label"&gt;&lt;icon name="move" scale="2"&gt;&lt;/icon&gt;体动&lt;/span&gt; &lt;baseline ref="move" :chartData="&#123;&#125;" v-if="'move' === tabItem"&gt;&lt;/baseline&gt; &lt;/el-tab-pane&gt;&lt;/el-tabs&gt; 这里默认tab为心率tab，当切换时，同一时刻只有一个v-if为true，当将其设置为true时，Vue会重新在页面渲染组件，即完成了组件渲染的步骤。欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>项目问题记录</tag>
        <tag>Vue</tag>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ETCD简介与使用]]></title>
    <url>%2F2018%2F03%2F28%2FETCD%E7%AE%80%E4%BB%8B%E4%B8%8E%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[最近在工作中后端业务需要与etcd数据库进行数据交互，ETCD——高可用的分布式键值（key-value）数据库，由GO语言实现。以下简单介绍下在这次业务实现中学习的ETCD的基本用法（入门小白级）， 下载安装单机实例安装，即stardard alone形式的安装，这种方式安装后，etcd的client和etcd的server均在同一台机器，便于练习。 etcdgithub仓库的releases页面下载对应的版本，Github下载地址 目前最新版本为V3.3.2,V2版本与V3版本差异较大，以下均为V3版本上的操作从github上下载后解压后，该目录下会有etcd、etcdctl两个可执行文件，cd至该目录下，查看对应版本 1etcd -version 若出现正确版本号，则可以正常使用，启动etcd服务器 1etcd 回车即可 基本用法coreos公司在开发etcd时，预留了多种交互接口， etcdctletcdctl属于ETCD的客户端，目前V3版本也兼容了V2版本的接口API，故而在使用etcdctl时，必须在命令开头指明所使用的API版本。（PS: 这部分就学了仨命令 QAQ） 123ETCDCTL_API=3 etcdctl put key1 "A" //返回OK表示添加key1:'A'键值对成功ETCDCTL_API=3 etcdctl get key1 //获取key1键的值ETCDCTL_API=3 etcdctl del key1 //删除key1键值对 REST APIetcd支持rest风格的接口，可直接利用curl直接与etcd交互 123456789101112131415161718 curl http://127.0.0.1:2379/version //查看版本 //V2版本 curl http://127.0.0.1:2379/v2/keys/hello -XPUT -d value="world" // 创建键值对（hello:"world"） curl http://127.0.0.1:2379/v2/keys/hello //查看hello键的值 curl http://127.0.0.1:2379/v2/keys/hello -X DELETE //删除hello键值对//V3版本，注意在V3版本中所有的key和value都必须转换为base64编码然后才可以存储// foo is 'Zm9v' in Base64// bar is 'YmFy' in Base64curl -L http://127.0.0.1:2379/v3beta/kv/put \ -X POST -d '&#123;"key": "Zm9v", "value": "YmFy"&#125;'// 创建键值对 foo:barcurl -L http://127.0.0.1:2379/v3beta/kv/range \ -X POST -d '&#123;"key": "Zm9v"&#125;' // 查看键值对 foo ETCD事务型操作ETCD的事务性操作这里以V3的curl方式为例： 123456789101112131415161718192021222324252627282930313233343536// python2// 已在etcd中创建了key1:0,A:&quot;success&quot;,B:&quot;failure&quot;三个键值对import jsonimport base64import requestsURL = &quot;http://127.0.0.1:2379/v3beta/kv/%s&quot;url = URL % &quot;txn&quot;payload = &#123; &quot;compare&quot;:[ &#123; &quot;target&quot;: &quot;VALUE&quot;, &quot;key&quot;:base64.b64encode(&quot;key1&quot;), &apos;result&apos;: &quot;EQUAL&quot;, &quot;value&quot;: base64.b64encode(&quot;0&quot;), &#125;, ], &quot;success&quot;:[ &#123; &quot;requestRange&quot;:&#123; &quot;key&quot;:base64.b64encode(&quot;A&quot;), &#125; &#125; ], &quot;failure&quot;:[ &#123; &quot;requestRange&quot;:&#123; &quot;key&quot;:base64.b64encode(&quot;B&quot;), &#125; &#125; ]&#125;resp = requests.post(url,json=payload)print json.dumps(resp.json(), indent=2) 以上的逻辑：在etcd中判断key1的值是否为0，如果为0则返回A的值，否则返回B的值compare相当于 If，success相当于then，failure相当于else即如果compare条件成立，执行success，否则执行failure compare compare中的条件结构如下： 123456789101112131415161718192021222324252627 &#123; "target": "VALUE",// (值为以下其中之一 "VALUE"，"CREATE", "MOD", "VERSION") "key":base64.b64encode("key1"), // 要比较的键值对的键 "result": "EQUAL", .//设置的判断条件，以下几种之一 （EQUAL,GREATER, NOT_EQUAL, LESS, ） "value": base64.b64encode("0"), // 这个的键与target对应， 值则为你想要比较的值 /* 'VERSION' =&gt; 'version', 'CREATE' =&gt; 'createRevision', 'MOD' =&gt; 'modRevision', 'VALUE' =&gt; 'value' */ &#125; ``` 上述的结构可理解为：判断 key（key1）的target（value）和value("0")是否 result（EQUAL） 每个条件都是一个类似的结构，多个条件之间同时成立，条件才为真，所以，实际上这也是为什么compare是数组的原因2. success，failure 这两个结构，用法类似 ```JSON &#123; requestRange:&#123; "key": base64.b64encode("A"), &#125; &#125; 这其中的requestRange,代表了range这个操作，即查看键值内部的值为参数 有requestRange，requestPut，requestDel，三种操作，分类对应于查看，创建，删除 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>云</category>
      </categories>
      <tags>
        <tag>ETCD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm及其插件升级]]></title>
    <url>%2F2018%2F03%2F27%2Fnpm%E5%8F%8A%E5%85%B6%E6%8F%92%E4%BB%B6%E5%8D%87%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[今天在新建Vue项目项目的时候，发现Vue在命令行中提示有最新版本，于是学会了如何升级npm及其插件的方法： 升级Npm 1npm install -g npm 全局升级插件（以Vue-cli为例） 1npm update vue -g 局部升级（项目内部升级） 1npm update axios --save 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>项目问题记录</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu下安装vue-cli后输入vue提示无法找到vue命令解决办法]]></title>
    <url>%2F2018%2F03%2F26%2Fubuntu%E4%B8%8B%E5%AE%89%E8%A3%85vue-cli%E5%90%8E%E8%BE%93%E5%85%A5vue%E6%8F%90%E7%A4%BA%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0vue%E5%91%BD%E4%BB%A4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[在学习完Vue官网的文档后，准备使用vue-cli来做一个实战,npm install vue-cli -g安装后Terminal输入vue却提示无法找到命令 解决方法建立软链接1$ sudo ln -s 你的vue-cli安装包的路径/bin/vue /usr/local/bin/vue 建立成功，则会在/usr/local/bin/目录下生成一个叫vue的文件然后输入1$ vue -V 正常输出版本号，问题解决欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>项目问题记录</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Hexo+Github搭建个人博客]]></title>
    <url>%2F2018%2F03%2F25%2F%E5%88%A9%E7%94%A8Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本示例都是在Windows10环境下配置 环境配置1.Node.js2.Git 创建过程创建仓库登陆Github网站，新建一个仓库，仓库名使用 你的GitHub帐户名/github.io 本地创建hexo的Blog项目首先利用npm安装hexo插件：1npm install hexo -g 然后创建一个放置你的博客项目的文件夹，这里以Blog为文件夹名称，CD进入该文件夹后，进行hexo项目的初始化12hexo initnpm install 待所有依赖安装完成之后，Blog下会生成如下的目录结构├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml这是你的博客的整个项目的站点的配置文件 package.json这是你的博客项目的整个的node依赖文件，记录了依赖有关的npm包的信息 scaffolds这个是博客文章的模板 source这个是存放各类博客的文件夹，其中_drafts表示草稿，_posts是发布到站点的文章 theme这个是整个站点的主题文件夹本地运行查看你的个人网站 在Blog文件夹下启动hexo自带的服务器，然后浏览器中访问http://localHost:4000查看博客效果1hexo s --debug 新建文章在Blog目录下输入如下命令，hexo会在source/_posts目录下生成对应的Markdown文件1hexo new "你的博客题目" 然后刷新浏览器即可看到对应的文章 将你的hexo项目发布至Github进行部署在_config.yml中找到如下配置项：123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: repository: branch: 由于我们使用的是github，故而对应项如下填写(注意’:’符号后必须有空格)123type: gitrepository: git@github.com:你的GitHub帐户名/你的GitHub帐户名.github.io.gitbranch: master 正确填写配置之后，利用npm安装hexo-deployer-git插件，该插件可以将你的就可以将自己的博客项目上传至Github上。1npm install hexo-deployer-git --save 安装完成之后，在Blog目录下输入如下命令上传至Github，1hexo d -g Github会自动帮你进行各种配置，然后就可以访问http://你的GitHub帐户名.github.io查看的你的博客了，注意当上传成功之后，Github的配置需要一定的时间，立即访问可能无法成功 个性化配置]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>项目问题记录</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端Cookie存储中文乱码问题解决]]></title>
    <url>%2F2018%2F03%2F24%2F%E5%89%8D%E7%AB%AFCookie%E5%AD%98%E5%82%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[前端使用Cookie在存储用户名等中文字符串时候，当从Cookie中取出时，会出现乱码 问题解释Cookie在存储中文时会将其转换为16进制，故而当从Cookie中取出时，取出的实际上时16进制的字符串 问题解决利用unescape()可以将Cookie中取出的字符串转换为对应的中文字符 欢迎访问我的博客了解更多]]></content>
      <categories>
        <category>Web开发</category>
      </categories>
      <tags>
        <tag>项目问题记录</tag>
        <tag>Cookie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java算法CodeWar——Day2]]></title>
    <url>%2F2018%2F03%2F18%2FJava%E7%AE%97%E6%B3%95CodeWar%E2%80%94%E2%80%94Day2%2F</url>
    <content type="text"><![CDATA[Code War code war honor 27 uestc position 58 quesetion 1Mr. Scrooge has a sum of money ‘P’ that wants to invest, and he wants to know how many years ‘Y’ this sum has to be kept in the bank in order for this sum of money to amount to ‘D’.The sum is kept for ‘Y’ years in the bank where interest ‘I’ is paid yearly, and the new sum is re-invested yearly after paying tax ‘T’Note that the principal is not taxed but only the year’s accrued interest Example: Let P be the Principal = 1000.00 Let I be the Interest Rate = 0.05 Let T be the Tax Rate = 0.18 Let D be the Desired Sum = 1100.00 After 1st Year --&gt; P = 1041.00 After 2nd Year --&gt; P = 1083.86 After 3rd Year --&gt; P = 1128.30 Thus Mr. Scrooge has to wait for 3 years for the initial pricipal to ammount to the desired sum.Your task is to complete the method provided and return the number of years ‘Y’ as a whole in order for Mr. Scrooge to get the desired sum.Assumptions : Assume that Desired Principal ‘D’ is always greater than the initial principal, however it is best to take into consideration that if the Desired Principal ‘D’ is equal to Principal ‘P’ this should return 0 Years. translation 1Scrooge将本金（principal）存入银行，每年的利息和交税计算公式如下：result = princial （ 1 + interest）- princialinterest*tax给定目标金额、本金、利率、税率，求出需要几年可以达到这个金额。如果目标金额和本金相等，返回0； 12345678910111213public class Money &#123; public static int calculateYears(double principal, double interest, double tax, double desired) &#123; int years = 0; while( principal &lt; desired) &#123; years++; principal = principal * ( 1 + interest ) - principal*interest*tax; &#125; return years; &#125;&#125; question 2Return the number (count) of vowels in the given string.We will consider a, e, i, o, and u as vowels for this Kata.The input string will only consist of lower case letters and/or spaces. translation 2返回字符串中的元音字母，元音字母为a、e、i、o、u，输入参数只包含小写字母 空格 和“/”（斜杠） 123456789101112131415public class Vowels &#123; public static int getCount(String str) &#123; int j = 0; char[] key = str.toCharArray(); for(int i = 0; i &lt; key.length; i++) &#123; if(key[i] == 'a' | key[i] =='e'| key[i] == 'i' | key[i] == 'o' | key[i] == 'u') &#123; j++; &#125; &#125; return j; &#125;&#125; question 3Part of Series 1/3: This kata is part of a series on the Morse code. After you solve this kata, you may move to the next one.In this kata you have to write a simple Morse code decoder. While the Morse code is now mostly superceded by voice and digital data communication channels, it still has its use in some applications around the world.The Morse code encodes every character as a sequence of “dots” and “dashes”. For example, the letter A is coded as ·−, letter Q is coded as −−·−, and digit 1 is coded as ·−−−. The Morse code is case-insensitive, traditionally capital letters are used. When the message is written in Morse code, a single space is used to separate the character codes and 3 spaces are used to separate words. For example, the message HEY JUDE in Morse code is ···· · −·−− ·−−− ··− −·· ·.NOTE: Extra spaces before or after the code have no meaning and should be ignored.In addition to letters, digits and some punctuation, there are some special service codes, the most notorious of those is the international distress signal SOS (that was first issued by Titanic), that is coded as ···−−−···. These special codes are treated as single special characters, and usually are transmitted as separate words.Your task is to implement a function decodeMorse(morseCode), that would take the morse code as input and return a decoded human-readable string.For example: MorseCodeDecoder.decode(&quot;.... . -.-- .--- ..- -.. .&quot;) //should return &quot;HEY JUDE&quot; The Morse code table is preloaded for you as a dictionary, feel free to use it. In CoffeeScript, C++, JavaScript, PHP, Python, Ruby and TypeScript, the table can be accessed like this: MORSE_CODE[‘.–’], in Java it is MorseCode.get(‘.–’), in C# it is MorseCode.Get(‘.–’), in Haskell the codes are in a Map String String and can be accessed like this: morseCodes ! “.–”, in Elixir it is morse_codes variable.All the test strings would contain valid Morse code, so you may skip checking for errors and exceptions. In C#, tests will fail if the solution code throws an exception, please keep that in mind. This is mostly because otherwise the engine would simply ignore the tests, resulting in a “valid” solution.Good luck!After you complete this kata, you may try yourself at Decode the Morse code, advanced. translation 3制作一个摩斯码的解码器摩斯码用’.’和’-‘来表示信息，不区分大小写，一个空格分割字符，三个空格分隔单词，你的任务是实现一个函数decodeMorse(morseCode) 传入摩斯码，返回英文字符串。摩斯码表我们已经预先提供给你了，Java使用方法： MorseCode.get(&#39;.--&#39;) 12345678910111213141516171819202122232425262728293031323334/* pass the BaseTest but not the ComplexTest */public class MorseCodeDecoder &#123; public static String decode(String morseCode) &#123; String s = morseCode.replaceAll(" ", "#").replaceAll(" ", "|"); char[] key = s.toCharArray(); String result = ""; String temp = ""; String str = ""; for(int i = 0; i &lt; key.length; i++) &#123; if(key[i] == '|') &#123; str += MorseCode.get(temp); temp = ""; &#125; else if(key[i] == '#') &#123; str += MorseCode.get(temp); result += str + " "; str = ""; temp = ""; &#125; else&#123; temp += key[i]; &#125; &#125; str += MorseCode.get(temp); result += str; return result; &#125;&#125; public String replaceAll(@NotNull String regex, @NotNull String replacement)将字符串按照正则表达式用参数replacement进行替换 question 4Implement a method that accepts 3 integer values a, b, c. The method should return true if a triangle can be built with the sides of given length and false in any other case.(In this case, all triangles must have surface greater than 0 to be accepted). translation 4实现一个方法，输入三角形的三个边长度，如果能构成三角形，则返回true，否则返回false，注：输入值均大于0； 12345678910public class TriangleTester &#123; public static boolean isTriangle(int a, int b, int c)&#123; if( a+b &gt; c &amp; a+c &gt; b &amp; b+c &gt; a ) &#123; return true; &#125; return false; &#125;&#125; 对应代码链接，欢迎fork和star]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>CodeWar</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java算法CodeWar——Day1]]></title>
    <url>%2F2018%2F03%2F18%2FJava%E7%AE%97%E6%B3%95CodeWar%E2%80%94%E2%80%94Day1%2F</url>
    <content type="text"><![CDATA[Code War code war honor 27 uestc position 58 quesetion 1Jaden Smith, the son of Will Smith, is the star of films such as The Karate Kid (2010) and After Earth (2013). Jaden is also known for some of his philosophy that he delivers via Twitter. When writing on Twitter, he is known for almost always capitalizing every word. Your task is to convert strings to how they would be written by Jaden Smith. The strings are actual quotes from Jaden Smith, but they are not capitalized in the same way he originally typed them. Example: Not Jaden-Cased: “How can mirrors be real if our eyes aren’t real”Jaden-Cased: “How Can Mirrors Be Real If Our Eyes Aren’t Real”Note that the Java version expects a return value of null for an empty string or null. translation 1给一个初始的字符串，对于该字符串的每个单词的首字母转换为大写并返回，当传入字符串为空字符串(即””)或者传入参数为null时，返回null。 1234567891011121314151617181920public class JadenCase &#123; public String toJadenCase(String phrase) &#123; if(phrase == null || phrase.length() == 0 ) &#123; return null; &#125; char[] str = phrase.toCharArray(); str[0] = Character.toUpperCase(str[0]); for (int i = 0; i &lt; str.length ; i++ ) &#123; if(str[i] == ' ') &#123; str[i+1] = Character.toUpperCase(str[i+1]); &#125; &#125; return new String(str); &#125;&#125; 在判断参数类型时，如果需要判断传入的参数是否为null， 则必须首先判断是否为null，再判断其他条件，反例： phrase.length() == 0 || phrase == null，在判断这个条件时，如果phrase为null，这是首先判断其长度，就会出错。 字符串转化为字符串数组时，用str.CharArray(); 字符大小写转化：Character.toUpperCase(char c)、 Character.toLowerCase(char c) 字符数组转换为字符串 new String(char c[]) question 2In a small town the population is p0 = 1000 at the beginning of a year. The population regularly increases by 2 percent per year and moreover 50 new inhabitants per year come to live in the town. How many years does the town need to see its population greater or equal to p = 1200 inhabitants? At the end of the first year there will be: 1000 + 1000 * 0.02 + 50 =&gt; 1070 inhabitants At the end of the 2nd year there will be: 1070 + 1070 * 0.02 + 50 =&gt; 1141 inhabitants (number of inhabitants is an integer) At the end of the 3rd year there will be: 1141 + 1141 * 0.02 + 50 =&gt; 1213 It will need 3 entire years. More generally given parameters: p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass) the function nb_year should return n number of entire years needed to get a population greater or equal to p. aug is an integer, percent a positive or null number, p0 and p are positive integers (&gt; 0) Examples:nb_year(1500, 5, 100, 5000) -&gt; 15nb_year(1500000, 2.5, 10000, 2000000) -&gt; 10Note: Don’t forget to convert the percent parameter as a percentage in the body of your function: if the parameter percent is 2 you have to convert it to 0.02. translation 2某个区域的人口初始为p0，每年以 百分之percent的速度增加，另外每年还会迁移过来aug个人,编程实现函数，返回几年后人口会达到p。 12345678910111213141516class Arge &#123; public static int nbYear(int p0, double percent, int aug, int p) &#123; int sum; percent = percent*0.01; for(int i = 1; ; i++ ) &#123; sum = (int)(p0 + p0 * percent + aug); if( sum &gt;= p) &#123; return i; &#125; p0 = sum; &#125; &#125;&#125; 强制转换 (int)float a; question 3Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit. For example: persistence(39) == 3 // because 3*9 = 27, 2*7 = 14, 1*4=4 // and 4 has only one digit persistence(999) == 4 // because 9*9*9 = 729, 7*2*9 = 126, // 1*2*6 = 12, and finally 1*2 = 2 persistence(4) == 0 // because 4 is already a one-digit number translation 3实现一个函数persistence, 传入一个正整数参数，把参数的每个数字相乘，得到的积如果不是个位数，那么重复上述操作，继续乘，如果是个位数，那么返回计算的次数（即重复了多少次上述操作） 12345678910111213141516171819202122232425class Persist &#123; public static int persistence(long n) &#123; char str[] = (n+"").toCharArray(); int time=0; while(str.length &gt; 1) &#123; int temp = 1; int[] key = new int[str.length]; for(int i = 0; i &lt; str.length; i++) &#123; key[i] = Integer.parseInt(String.valueOf(str[i])); temp = key[i] * temp; &#125; str = (temp+"").toCharArray(); time++; if(temp &lt; 10) &#123; break; &#125; &#125; return time; &#125;&#125; 数字转化为字符串 可使用如下方式 int + “” Java中数组的创建方法: int[] arr = new int[length]; 字符转化为数字：Integer.parseInt(String.valueOf(char c))即把’2’转换为数字2，而强制转换(int)char c;是把对应字符转化为对应的ascii码值 question 4Take 2 strings s1 and s2 including only letters from ato z. Return a new sorted string, the longest possible, containing distinct letters, each taken only once - coming from s1 or s2. Examples: a = “xyaabbbccccdefww” b = “xxxxyyyyabklmopq” longest(a, b) -&gt; “abcdefklmopqwxy” a = “abcdefghijklmnopqrstuvwxyz” longest(a, a) -&gt; “abcdefghijklmnopqrstuvwxyz” translation 4给定两个字符串，统计出现的字母并按照字母表的顺序排序 public class TwoToOne { public static String longest (String s1, String s2) { char[] str = (s1+s2).toCharArray(); int[] key = new int[26]; char[] aim = new char[26]; for(int i = 0; i &lt; str.length; i++) { key[(int)str[i] - 97] = 1; } int i = 0; for(int j = 0; j &lt; 26; j++) { if(key[j] == 1) { aim[i] = (char)(j+97); i++; } } char[] re = new char[i]; System.arraycopy(aim, 0, re, 0,i); return new String(re); } } 字符串拼接 str1 + str2; 数组复制函数arraycopy(@NotNull Object src, int srcPos,@NotNull Object dest,int destPos,int length)参数 src 源数组，srcPos 源数组复制起点，dest 目标数组，destPos 目标数组开始位置，复制长度， 对应代码链接，欢迎fork和star]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>CodeWar</tag>
      </tags>
  </entry>
</search>
